{"version":3,"sources":["assets/languages.js","pages/Main.js","pages/Login.js","pages/EditUserInfo.js","pages/Register.js","pages/Dashboard.js","pages/Translations.js","components/Navigation.js","App.js","index.js"],"names":["languages","abbr","name","Main","inputText","setInputText","useState","translatedText","setTranslatedText","selectedLang","setSelectedLang","API_SERVER","process","React","createElement","Fragment","className","onSubmit","async","event","preventDefault","selectedLangValue","document","getElementById","value","response","fetch","method","headers","Content-Type","body","JSON","stringify","targetLanguage","data","json","error","alert","translation","token","localStorage","getItem","saveResponse","Authorization","input_text","translated_text","input_language","target_language","status","saveError","message","removeItem","Navigate","console","type","onChange","target","htmlFor","id","key","map","lang","Login","email","setEmail","password","setPassword","navigate","useNavigate","e","ok","setItem","placeholder","required","EditUserInfo","username","setUsername","setError","success","setSuccess","useEffect","fetchUserData","undefined","style","color","Register","errorData","Dashboard","onClick","handleViewTranslations","handleEditUserInfo","handleDeleteAccount","Translations","translations","setTranslations","fetchTranslations","Date","timestamp","toLocaleString","Navigation","href","App","Router","Routes","Route","path","element","DeleteAccount","to","ReactDOM","render"],"mappings":"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","file":"static/js/main.4a9e43f6.chunk.js","sourcesContent":["export const languages = [\n    { abbr: \"ar\", name: \"Arabic\" },\n    { abbr: \"bg\", name: \"Bulgarian\" },\n    { abbr: \"zh\", name: \"Chinese\" },\n    { abbr: \"cs\", name: \"Czech\" },\n    { abbr: \"da\", name: \"Danish\" },\n    { abbr: \"nl\", name: \"Dutch\" },\n    { abbr: \"en\", name: \"English\" },\n    { abbr: \"et\", name: \"Estonian\" },\n    { abbr: \"fi\", name: \"Finnish\" },\n    { abbr: \"fr\", name: \"French\" },\n    { abbr: \"de\", name: \"German\" },\n    { abbr: \"el\", name: \"Greek\" },\n    { abbr: \"hu\", name: \"Hungarian\" },\n    { abbr: \"id\", name: \"Indonesian\" },\n    { abbr: \"it\", name: \"Italian\" },\n    { abbr: \"ja\", name: \"Japanese\" },\n    { abbr: \"ko\", name: \"Korean\" },\n    { abbr: \"lv\", name: \"Latvian\" },\n    { abbr: \"lt\", name: \"Lithuanian\" },\n    { abbr: \"no\", name: \"Norwegian\" },\n    { abbr: \"pl\", name: \"Polish\" },\n    { abbr: \"pt\", name: \"Portuguese\" },\n    { abbr: \"ro\", name: \"Romanian\" },\n    { abbr: \"ru\", name: \"Russian\" },\n    { abbr: \"sk\", name: \"Slovak\" },\n    { abbr: \"sl\", name: \"Slovenian\" },\n    { abbr: \"es\", name: \"Spanish\" },\n    { abbr: \"sv\", name: \"Swedish\" },\n    { abbr: \"tr\", name: \"Turkish\" },\n    { abbr: \"uk\", name: \"Ukrainian\" }\n  ];","import React, { useState } from \"react\";\nimport \"./Main.css\";\nimport { languages } from \"../assets/languages\";\nimport { Navigate } from \"react-router-dom\";\n\nconst Main = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [translatedText, setTranslatedText] = useState(\"\");\n  const [selectedLang, setSelectedLang] = useState(\"\");\n\n  const API_SERVER =\n    process.env.REACT_APP_API_SERVER || \"http://localhost:5000\";\n\n  const handleInputChange = async (event) => {\n    event.preventDefault();\n\n    const selectedLangElement = document.getElementById(\"selected-lang\");\n    const selectedLangValue = selectedLangElement.value;\n\n    if (selectedLangValue === \"none\") {\n      alert(\"Please select a language\");\n      return;\n    }\n\n    try {\n      const response = await fetch(`${API_SERVER}/translate`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          inputText,\n          targetLanguage: selectedLangValue,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.error) {\n        alert(\"Error: \" + data.error);\n      } else {\n        setTranslatedText(data.translation);\n\n        // Save the translation to the backend\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n          const saveResponse = await fetch(`${API_SERVER}/translations`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${token}`,\n            },\n            body: JSON.stringify({\n              input_text: inputText, \n              translated_text: data.translation, \n              input_language: \"en\", \n              target_language: selectedLangValue,\n            }),\n          });\n\n          if (saveResponse.status === 401) {\n            const saveError = await saveResponse.json();\n            if (saveError.message === \"Token has expired\") {\n              alert(\"Failed to save translation: \" + saveError.message);\n              localStorage.removeItem(\"token\");\n              Navigate(\"/login\");\n            }\n          } else {\n            alert(\"You need to be logged in to save translations.\");\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Translation error:\", error);\n      alert(\"An error occurred while translating.\");\n    }\n  };\n\n  const handleInput = (event) => {\n    setInputText(event.target.value);\n  };\n\n  const handleSelectChange = (event) => {\n    setSelectedLang(event.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"content\">\n        <div>\n          <h1 className=\"app-title\">UNIFi</h1>\n          <h3>Translate..</h3>\n          <form onSubmit={handleInputChange}>\n            <input type=\"text\" value={inputText} onChange={handleInput} />\n            <br />\n            <br />\n            <label htmlFor=\"selected-lang\">Choose a Language </label>\n            <select\n              id=\"selected-lang\"\n              value={selectedLang}\n              onChange={handleSelectChange}\n            >\n              <option value=\"none\" key=\"none\">\n                {\" \"}\n                ..{\" \"}\n              </option>\n              {languages.map((lang) => (\n                <option value={lang.abbr} key={lang.abbr}>\n                  {lang.name}\n                </option>\n              ))}\n            </select>\n\n            <button type=\"submit\">Translate</button>\n            {/* translated text below */}\n            <h3 className=\"translated-text\">{translatedText}</h3>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Main;","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const navigate = useNavigate();\n\n  const API_SERVER = process.env.REACT_APP_API_SERVER || 'http://localhost:5000';\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n  \n    try {\n      const response = await fetch(\n        `${API_SERVER}/login`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ email, password }),\n        }\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(\"token\", data.token); // storing token\n        navigate(\"/dashboard\");\n      } else {\n        console.error(\"Login failed\", response.status);\n      }\n    } catch (error) {\n      console.error(\"Login error\", error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleLogin}>\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Email\"\n        required\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"password\"\n        required\n      />\n\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n};\n\nexport default Login;\n","import React, {useState, useEffect} from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nconst EditUserInfo = () => {\n\n    const [username, setUsername] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [success, setSuccess] = useState(\"\");\n    const navigate = useNavigate();\n\n    const API_SERVER = process.env.REACT_APP_API_SERVER || 'http://localhost:5000'\n\n    // fetching current user data\n    useEffect(() => {\n        const fetchUserData = async () => {\n            const token = localStorage.getItem(\"token\");\n            if (!token) {\n                navigate(\"/login\");\n                return;\n            }\n\n            try {\n                const response = await fetch(`${API_SERVER}/get-user-info`, {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${token}`, \n                    }\n                });\n\n                if (response.ok) {\n                    const data = await response.json();\n                    setUsername(data.username);\n                    setEmail(data.email);\n                } else {\n                    setError(\"Failed to fetch user data\");\n\n                }\n            } catch (error) {\n                console.error(\"Error fetching original user data:\", error)\n                setError(\"An error occured fetching original user data\");\n            }\n        };\n        fetchUserData();\n    }, [navigate, API_SERVER])\n\n\n\n    // form submission\n\n    const handleChange = async (e) => {\n        e.preventDefault();\n        const token = localStorage.getItem('token');\n        if (!token) {\n            navigate(\"/login\");\n            return;\n        }\n\n        try {\n            const response = await fetch(`http://localhost:5000/edit-info`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${token}`,\n                },\n                body: JSON.stringify({username: username || undefined, \n                    email: email || undefined, \n                    password: password || undefined})\n            });\n\n            if (response.ok) {\n                setSuccess(\"Your information has been updated!\");\n            } else {\n                setError(\"Failed in updating your information.\");\n            } \n        } catch (error) {\n            console.error(\"Error updating your info:\", error);\n            setError(\"An error occured while updating your user information.\");\n        }\n\n    };\n\n    return (\n        <form onSubmit={handleChange}>\n          <h2>Edit Your Info</h2>\n          {error && <p style={{ color: \"red\" }}>{error}</p>}\n          {success && <p style={{ color: \"green\" }}>{success}</p>}\n          <input\n            type=\"text\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            placeholder=\"Username\"\n            required\n          />\n          <input\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            placeholder=\"Email\"\n            required\n          />\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder=\"Password (leave blank to keep current password)\"\n          />\n          <button type=\"submit\">Save Changes</button>\n        </form> );\n};\n\n\n\n\nexport default EditUserInfo;","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Register = () => {\n    const [username, setUsername] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const navigate = useNavigate();\n\n    // API server from local env\n    const API_SERVER = process.env.REACT_APP_API_SERVER || 'http://localhost:5000';\n\n    const handleRegister = async (e) => {\n        e.preventDefault();\n\n        try {\n            const response = await fetch(`${API_SERVER}/register`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ username, email, password }),\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                alert(data.message);\n                localStorage.setItem('token', data.token); // storing token\n                navigate('/dashboard'); // redirecting after registration\n            } else {\n                const errorData = await response.json();\n                alert(`Registration failed: ${errorData.message}`);\n            }\n        } catch (error) {\n            console.error('Registration error:', error);\n            alert(`Registration failed: ${error.message}`);\n        }\n    };\n\n    return (\n        <form onSubmit={handleRegister}>\n            <input \n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"Username\"\n            />\n\n            <input \n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Email\"\n            />\n\n            <input \n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Password\"\n            />\n            <button type=\"submit\">Register</button>\n        </form>\n    );\n};\n\nexport default Register;\n","import React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Dashboard = () => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) navigate(\"/login\");\n  }, [navigate]);\n\n\n\n\n\n  const handleViewTranslations = () => {\n    navigate(\"/translations\");\n  };\n\n  const handleEditUserInfo = () => {\n    navigate(\"/edit-info\");\n  };\n\n  const handleDeleteAccount = () => {\n    navigate(\"/delete-account\");\n  };\n\n  return (\n    <div>\n      <h1>Welcome to your Dashboard</h1>\n      <button onClick={handleViewTranslations}>View Your Translations</button>\n      <button onClick={handleEditUserInfo}>Edit Your Info</button>\n      <button onClick={handleDeleteAccount}>Delete Your Account</button>\n    </div>\n  );\n};\n\n\nexport default Dashboard;","import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Translations = () => {\n    const [translations, setTranslations] = useState([]);\n    const [error, setError] = useState(\"\");\n    const navigate = useNavigate();\n\n    const API_SERVER = process.env.REACT_APP_API_SERVER || 'http://localhost:5000';\n\n    useEffect(() => {\n        const fetchTranslations = async () => {\n            const token = localStorage.getItem('token');\n            if (!token) {\n                navigate(\"/login\");\n                return;\n            }\n\n            try {\n                const response = await fetch(`${API_SERVER}/user/translations`, {\n                    method: 'GET',\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${token}`,\n                    },\n                });\n\n                if (response.ok) {\n                    const data = await response.json();\n                    setTranslations(data);\n                } else {\n                    setError(\"Failed to fetch translations\");\n                }\n            } catch (error) {\n                setError(\"An error occurred while fetching translations.\");\n            }\n        };\n        fetchTranslations();\n    }, [navigate, API_SERVER]);\n\n    return (\n        <div>\n            <h1>Your Translations</h1>\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\n            <ul>\n                {translations.map((translation) => (\n                    <li key={translation.id}>\n                        <p><strong>Input:</strong> {translation.input_text}</p>\n                        <p><strong>Translated:</strong> {translation.translated_text}</p>\n                        <p><strong>From:</strong> {translation.input_language}</p>\n                        <p><strong>To:</strong> {translation.target_language}</p>\n                        <p><strong>Date:</strong> {new Date(translation.timestamp).toLocaleString()}</p>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default Translations;","import './Navigation.css';\nimport React from 'react';\n\n\nconst Navigation  = () => {\n    return (\n        <div className=\"navigation\">\n            <a href=\"/register\">Register</a>\n            <a href=\"/about\">My Translations</a>\n        </div>\n    )\n};\n\nexport default Navigation;","import React from \"react\";\nimport Main from \"./pages/Main\";\nimport Login from \"./pages/Login\";\nimport EditUserInfo from \"./pages/EditUserInfo\";\nimport DeleteAccount from \"./pages/DeleteAccount\";\nimport Register from \"./pages/Register\";\nimport Dashboard from './pages/Dashboard';\nimport Translations from \"./pages/Translations\";\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Navigate,\n  Routes,\n} from \"react-router-dom\";\n\nimport Navigation from \"./components/Navigation\";\n\n\n\nfunction App() {\n  return (\n    <>\n      <Router>\n          <Navigation />\n\n\n\n        <Routes>\n\n          {/* vvvvvvvv this is the main SPA */}\n          <Route path=\"/\" element={<Main />} />\n      \n          {/* vvvvvv user related functionality */}\n         \n          <Route path='/login' element={<Login />} />\n          <Route path='/register' element={<Register />} />\n          <Route path='/dashboard' element={<Dashboard />} />\n          \n\n          <Route path='/translations' element = {<Translations/>} />\n          <Route path=\"/edit-info\" element={<EditUserInfo/>} />\n          <Route path=\"/delete-account\" element={<DeleteAccount/>} />\n          \n\n\n\n          <Route path='*' element = {<Navigate to=\"/\" />} />\n         \n        </Routes>\n        \n      </Router>\n    \n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n"],"sourceRoot":""}